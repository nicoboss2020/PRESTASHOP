// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package prestashop.ods_prestashop_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ODS_Prestashop Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class ODS_Prestashop implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ODS_Prestashop";
	private final String projectName = "PRESTASHOP";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ODS_Prestashop.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ODS_Prestashop.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String sexe;

		public String getSexe() {
			return this.sexe;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public java.util.Date ddn;

		public java.util.Date getDdn() {
			return this.ddn;
		}

		public java.util.Date date_inscription;

		public java.util.Date getDate_inscription() {
			return this.date_inscription;
		}

		public java.util.Date date_inscription_newsletter;

		public java.util.Date getDate_inscription_newsletter() {
			return this.date_inscription_newsletter;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String cp;

		public String getCp() {
			return this.cp;
		}

		public Integer newsletter;

		public Integer getNewsletter() {
			return this.newsletter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.pays = this.pays;
			other.sexe = this.sexe;
			other.id_client = this.id_client;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.ddn = this.ddn;
			other.date_inscription = this.date_inscription;
			other.date_inscription_newsletter = this.date_inscription_newsletter;
			other.ville = this.ville;
			other.cp = this.cp;
			other.newsletter = this.newsletter;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.pays = readString(dis);

					this.sexe = readString(dis);

					this.id_client = readInteger(dis);

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.ddn = readDate(dis);

					this.date_inscription = readDate(dis);

					this.date_inscription_newsletter = readDate(dis);

					this.ville = readString(dis);

					this.cp = readString(dis);

					this.newsletter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.sexe, dos);

				// Integer

				writeInteger(this.id_client, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// java.util.Date

				writeDate(this.ddn, dos);

				// java.util.Date

				writeDate(this.date_inscription, dos);

				// java.util.Date

				writeDate(this.date_inscription_newsletter, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.cp, dos);

				// Integer

				writeInteger(this.newsletter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pays=" + pays);
			sb.append(",sexe=" + sexe);
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",ddn=" + String.valueOf(ddn));
			sb.append(",date_inscription=" + String.valueOf(date_inscription));
			sb.append(",date_inscription_newsletter=" + String.valueOf(date_inscription_newsletter));
			sb.append(",ville=" + ville);
			sb.append(",cp=" + cp);
			sb.append(",newsletter=" + String.valueOf(newsletter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ClientStruct implements routines.system.IPersistableRow<ClientStruct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String sexe;

		public String getSexe() {
			return this.sexe;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public java.util.Date ddn;

		public java.util.Date getDdn() {
			return this.ddn;
		}

		public java.util.Date date_inscription;

		public java.util.Date getDate_inscription() {
			return this.date_inscription;
		}

		public java.util.Date date_inscription_newsletter;

		public java.util.Date getDate_inscription_newsletter() {
			return this.date_inscription_newsletter;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String cp;

		public String getCp() {
			return this.cp;
		}

		public Integer newsletter;

		public Integer getNewsletter() {
			return this.newsletter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ClientStruct other = (ClientStruct) obj;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			return true;
		}

		public void copyDataTo(ClientStruct other) {

			other.pays = this.pays;
			other.sexe = this.sexe;
			other.id_client = this.id_client;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.ddn = this.ddn;
			other.date_inscription = this.date_inscription;
			other.date_inscription_newsletter = this.date_inscription_newsletter;
			other.ville = this.ville;
			other.cp = this.cp;
			other.newsletter = this.newsletter;

		}

		public void copyKeysDataTo(ClientStruct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.pays = readString(dis);

					this.sexe = readString(dis);

					this.id_client = readInteger(dis);

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.ddn = readDate(dis);

					this.date_inscription = readDate(dis);

					this.date_inscription_newsletter = readDate(dis);

					this.ville = readString(dis);

					this.cp = readString(dis);

					this.newsletter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.sexe, dos);

				// Integer

				writeInteger(this.id_client, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// java.util.Date

				writeDate(this.ddn, dos);

				// java.util.Date

				writeDate(this.date_inscription, dos);

				// java.util.Date

				writeDate(this.date_inscription_newsletter, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.cp, dos);

				// Integer

				writeInteger(this.newsletter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pays=" + pays);
			sb.append(",sexe=" + sexe);
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",ddn=" + String.valueOf(ddn));
			sb.append(",date_inscription=" + String.valueOf(date_inscription));
			sb.append(",date_inscription_newsletter=" + String.valueOf(date_inscription_newsletter));
			sb.append(",ville=" + ville);
			sb.append(",cp=" + cp);
			sb.append(",newsletter=" + String.valueOf(newsletter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ClientStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];

		public java.util.Date newsletter_date_add;

		public java.util.Date getNewsletter_date_add() {
			return this.newsletter_date_add;
		}

		public Integer id_customer;

		public Integer getId_customer() {
			return this.id_customer;
		}

		public String firstname;

		public String getFirstname() {
			return this.firstname;
		}

		public String lastname;

		public String getLastname() {
			return this.lastname;
		}

		public java.util.Date birthday;

		public java.util.Date getBirthday() {
			return this.birthday;
		}

		public Integer newsletter;

		public Integer getNewsletter() {
			return this.newsletter;
		}

		public java.util.Date date_add;

		public java.util.Date getDate_add() {
			return this.date_add;
		}

		public String postcode;

		public String getPostcode() {
			return this.postcode;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String name_1;

		public String getName_1() {
			return this.name_1;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.newsletter_date_add = readDate(dis);

					this.id_customer = readInteger(dis);

					this.firstname = readString(dis);

					this.lastname = readString(dis);

					this.birthday = readDate(dis);

					this.newsletter = readInteger(dis);

					this.date_add = readDate(dis);

					this.postcode = readString(dis);

					this.city = readString(dis);

					this.name = readString(dis);

					this.name_1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.newsletter_date_add, dos);

				// Integer

				writeInteger(this.id_customer, dos);

				// String

				writeString(this.firstname, dos);

				// String

				writeString(this.lastname, dos);

				// java.util.Date

				writeDate(this.birthday, dos);

				// Integer

				writeInteger(this.newsletter, dos);

				// java.util.Date

				writeDate(this.date_add, dos);

				// String

				writeString(this.postcode, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.name_1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newsletter_date_add=" + String.valueOf(newsletter_date_add));
			sb.append(",id_customer=" + String.valueOf(id_customer));
			sb.append(",firstname=" + firstname);
			sb.append(",lastname=" + lastname);
			sb.append(",birthday=" + String.valueOf(birthday));
			sb.append(",newsletter=" + String.valueOf(newsletter));
			sb.append(",date_add=" + String.valueOf(date_add));
			sb.append(",postcode=" + postcode);
			sb.append(",city=" + city);
			sb.append(",name=" + name);
			sb.append(",name_1=" + name_1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				ClientStruct Client = new ClientStruct();
				ClientStruct row8 = Client;

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "client";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "client" + "` WHERE `id_client` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "client"
						+ "` (`pays`,`sexe`,`id_client`,`prenom`,`nom`,`ddn`,`date_inscription`,`date_inscription_newsletter`,`ville`,`cp`,`newsletter`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "client"
						+ "` SET `pays` = ?,`sexe` = ?,`prenom` = ?,`nom` = ?,`ddn` = ?,`date_inscription` = ?,`date_inscription_newsletter` = ?,`ville` = ?,`cp` = ?,`newsletter` = ? WHERE `id_client` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("Client" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[11];

					public void addRow(String[] row) {

						for (int i = 0; i < 11; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 10 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 10 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[10] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "pays", "sexe", "id_client", "prenom", "nom", "ddn",
						"date_inscription", "date_inscription_newsletter", "ville", "cp", "newsletter", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ClientStruct Client_tmp = new ClientStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/Users/ak-59/OneDrive/Bureau/Presta/cust.csv"/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_1)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.newsletter_date_add = null;

								row1.id_customer = null;

								row1.firstname = null;

								row1.lastname = null;

								row1.birthday = null;

								row1.newsletter = null;

								row1.date_add = null;

								row1.postcode = null;

								row1.city = null;

								row1.name = null;

								row1.name_1 = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.newsletter_date_add = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"newsletter_date_add", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.newsletter_date_add = null;

									}

								} else {

									row1.newsletter_date_add = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.id_customer = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_customer", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.id_customer = null;

									}

								} else {

									row1.id_customer = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.firstname = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.firstname = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.lastname = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.lastname = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.birthday = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"birthday", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.birthday = null;

									}

								} else {

									row1.birthday = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.newsletter = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"newsletter", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.newsletter = null;

									}

								} else {

									row1.newsletter = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.date_add = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"date_add", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.date_add = null;

									}

								} else {

									row1.date_add = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.postcode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.postcode = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.city = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.city = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.name = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.name_1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.name_1 = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								Client = null;

// # Output table : 'Client'
								Client_tmp.pays = row1.name;
								Client_tmp.sexe = row1.name_1;
								Client_tmp.id_client = row1.id_customer;
								Client_tmp.prenom = row1.firstname;
								Client_tmp.nom = row1.lastname;
								Client_tmp.ddn = row1.birthday;
								Client_tmp.date_inscription = row1.date_add;
								Client_tmp.date_inscription_newsletter = row1.newsletter_date_add;
								Client_tmp.ville = row1.city;
								Client_tmp.cp = row1.postcode;
								Client_tmp.newsletter = row1.newsletter;
								Client = Client_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "Client"
							if (Client != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								// Client
								// Client

								if (execStat) {
									runStat.updateStatOnConnection("Client" + iterateId, 1, 1);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[11];

								if (Client.pays != null) { //
									row_tLogRow_1[0] = String.valueOf(Client.pays);

								} //

								if (Client.sexe != null) { //
									row_tLogRow_1[1] = String.valueOf(Client.sexe);

								} //

								if (Client.id_client != null) { //
									row_tLogRow_1[2] = String.valueOf(Client.id_client);

								} //

								if (Client.prenom != null) { //
									row_tLogRow_1[3] = String.valueOf(Client.prenom);

								} //

								if (Client.nom != null) { //
									row_tLogRow_1[4] = String.valueOf(Client.nom);

								} //

								if (Client.ddn != null) { //
									row_tLogRow_1[5] = FormatterUtils.format_Date(Client.ddn, "dd-MM-yyyy");

								} //

								if (Client.date_inscription != null) { //
									row_tLogRow_1[6] = FormatterUtils.format_Date(Client.date_inscription,
											"dd-MM-yyyy");

								} //

								if (Client.date_inscription_newsletter != null) { //
									row_tLogRow_1[7] = FormatterUtils.format_Date(Client.date_inscription_newsletter,
											"dd-MM-yyyy");

								} //

								if (Client.ville != null) { //
									row_tLogRow_1[8] = String.valueOf(Client.ville);

								} //

								if (Client.cp != null) { //
									row_tLogRow_1[9] = String.valueOf(Client.cp);

								} //

								if (Client.newsletter != null) { //
									row_tLogRow_1[10] = String.valueOf(Client.newsletter);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								row8 = Client;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								// row8
								// row8

								if (execStat) {
									runStat.updateStatOnConnection("row8" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_1 = false;
								if (row8.id_client == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(1, row8.id_client);
								}

								int checkCount_tDBOutput_1 = -1;
								try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
									while (rs_tDBOutput_1.next()) {
										checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
									}
								}
								if (checkCount_tDBOutput_1 > 0) {
									if (row8.pays == null) {
										pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(1, row8.pays);
									}

									if (row8.sexe == null) {
										pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(2, row8.sexe);
									}

									if (row8.prenom == null) {
										pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(3, row8.prenom);
									}

									if (row8.nom == null) {
										pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(4, row8.nom);
									}

									if (row8.ddn != null) {
										date_tDBOutput_1 = row8.ddn.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(5, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(5,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.DATE);
									}

									if (row8.date_inscription != null) {
										date_tDBOutput_1 = row8.date_inscription.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(6,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.DATE);
									}

									if (row8.date_inscription_newsletter != null) {
										date_tDBOutput_1 = row8.date_inscription_newsletter.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtUpdate_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_1.setTimestamp(7,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.DATE);
									}

									if (row8.ville == null) {
										pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(8, row8.ville);
									}

									if (row8.cp == null) {
										pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(9, row8.cp);
									}

									if (row8.newsletter == null) {
										pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(10, row8.newsletter);
									}

									if (row8.id_client == null) {
										pstmtUpdate_tDBOutput_1.setNull(11 + count_tDBOutput_1, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(11 + count_tDBOutput_1, row8.id_client);
									}

									try {
										updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
												+ pstmtUpdate_tDBOutput_1.executeUpdate();
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								} else {
									if (row8.pays == null) {
										pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(1, row8.pays);
									}

									if (row8.sexe == null) {
										pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(2, row8.sexe);
									}

									if (row8.id_client == null) {
										pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(3, row8.id_client);
									}

									if (row8.prenom == null) {
										pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(4, row8.prenom);
									}

									if (row8.nom == null) {
										pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(5, row8.nom);
									}

									if (row8.ddn != null) {
										date_tDBOutput_1 = row8.ddn.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(6,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.DATE);
									}

									if (row8.date_inscription != null) {
										date_tDBOutput_1 = row8.date_inscription.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(7,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.DATE);
									}

									if (row8.date_inscription_newsletter != null) {
										date_tDBOutput_1 = row8.date_inscription_newsletter.getTime();
										if (date_tDBOutput_1 < year1_tDBOutput_1
												|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
											pstmtInsert_tDBOutput_1.setString(8, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_1.setTimestamp(8,
													new java.sql.Timestamp(date_tDBOutput_1));
										}
									} else {
										pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.DATE);
									}

									if (row8.ville == null) {
										pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(9, row8.ville);
									}

									if (row8.cp == null) {
										pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(10, row8.cp);
									}

									if (row8.newsletter == null) {
										pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(11, row8.newsletter);
									}

									try {
										insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
												+ pstmtInsert_tDBOutput_1.executeUpdate();
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "Client"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Client" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_detail_commande;

		public Integer getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer quantite_produit;

		public Integer getQuantite_produit() {
			return this.quantite_produit;
		}

		public Float prix_unitaire_taxes_incluses;

		public Float getPrix_unitaire_taxes_incluses() {
			return this.prix_unitaire_taxes_incluses;
		}

		public Float pourcentage_reduction;

		public Float getPourcentage_reduction() {
			return this.pourcentage_reduction;
		}

		public java.util.Date date_commande;

		public java.util.Date getDate_commande() {
			return this.date_commande;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_detail_commande == null) ? 0 : this.id_detail_commande.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.id_detail_commande == null) {
				if (other.id_detail_commande != null)
					return false;

			} else if (!this.id_detail_commande.equals(other.id_detail_commande))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.quantite_produit = this.quantite_produit;
			other.prix_unitaire_taxes_incluses = this.prix_unitaire_taxes_incluses;
			other.pourcentage_reduction = this.pourcentage_reduction;
			other.date_commande = this.date_commande;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.id_detail_commande = this.id_detail_commande;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = readInteger(dis);

					this.quantite_produit = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_unitaire_taxes_incluses = null;
					} else {
						this.prix_unitaire_taxes_incluses = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pourcentage_reduction = null;
					} else {
						this.pourcentage_reduction = dis.readFloat();
					}

					this.date_commande = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_detail_commande, dos);

				// Integer

				writeInteger(this.quantite_produit, dos);

				// Float

				if (this.prix_unitaire_taxes_incluses == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_unitaire_taxes_incluses);
				}

				// Float

				if (this.pourcentage_reduction == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pourcentage_reduction);
				}

				// java.util.Date

				writeDate(this.date_commande, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",quantite_produit=" + String.valueOf(quantite_produit));
			sb.append(",prix_unitaire_taxes_incluses=" + String.valueOf(prix_unitaire_taxes_incluses));
			sb.append(",pourcentage_reduction=" + String.valueOf(pourcentage_reduction));
			sb.append(",date_commande=" + String.valueOf(date_commande));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CommandeStruct implements routines.system.IPersistableRow<CommandeStruct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id_detail_commande;

		public Integer getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer quantite_produit;

		public Integer getQuantite_produit() {
			return this.quantite_produit;
		}

		public Float prix_unitaire_taxes_incluses;

		public Float getPrix_unitaire_taxes_incluses() {
			return this.prix_unitaire_taxes_incluses;
		}

		public Float pourcentage_reduction;

		public Float getPourcentage_reduction() {
			return this.pourcentage_reduction;
		}

		public java.util.Date date_commande;

		public java.util.Date getDate_commande() {
			return this.date_commande;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_detail_commande == null) ? 0 : this.id_detail_commande.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final CommandeStruct other = (CommandeStruct) obj;

			if (this.id_detail_commande == null) {
				if (other.id_detail_commande != null)
					return false;

			} else if (!this.id_detail_commande.equals(other.id_detail_commande))

				return false;

			return true;
		}

		public void copyDataTo(CommandeStruct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.quantite_produit = this.quantite_produit;
			other.prix_unitaire_taxes_incluses = this.prix_unitaire_taxes_incluses;
			other.pourcentage_reduction = this.pourcentage_reduction;
			other.date_commande = this.date_commande;

		}

		public void copyKeysDataTo(CommandeStruct other) {

			other.id_detail_commande = this.id_detail_commande;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = readInteger(dis);

					this.quantite_produit = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix_unitaire_taxes_incluses = null;
					} else {
						this.prix_unitaire_taxes_incluses = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pourcentage_reduction = null;
					} else {
						this.pourcentage_reduction = dis.readFloat();
					}

					this.date_commande = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_detail_commande, dos);

				// Integer

				writeInteger(this.quantite_produit, dos);

				// Float

				if (this.prix_unitaire_taxes_incluses == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix_unitaire_taxes_incluses);
				}

				// Float

				if (this.pourcentage_reduction == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pourcentage_reduction);
				}

				// java.util.Date

				writeDate(this.date_commande, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",quantite_produit=" + String.valueOf(quantite_produit));
			sb.append(",prix_unitaire_taxes_incluses=" + String.valueOf(prix_unitaire_taxes_incluses));
			sb.append(",pourcentage_reduction=" + String.valueOf(pourcentage_reduction));
			sb.append(",date_commande=" + String.valueOf(date_commande));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CommandeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];

		public Integer id_category;

		public Integer getId_category() {
			return this.id_category;
		}

		public Integer id_product;

		public Integer getId_product() {
			return this.id_product;
		}

		public Integer id_order_detail;

		public Integer getId_order_detail() {
			return this.id_order_detail;
		}

		public Integer id_order;

		public Integer getId_order() {
			return this.id_order;
		}

		public Integer product_quantity;

		public Integer getProduct_quantity() {
			return this.product_quantity;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public Integer product_quantity_in_stock;

		public Integer getProduct_quantity_in_stock() {
			return this.product_quantity_in_stock;
		}

		public Float product_price;

		public Float getProduct_price() {
			return this.product_price;
		}

		public Float unit_price_tax_incl;

		public Float getUnit_price_tax_incl() {
			return this.unit_price_tax_incl;
		}

		public Float reduction_percent;

		public Float getReduction_percent() {
			return this.reduction_percent;
		}

		public java.util.Date date_add;

		public java.util.Date getDate_add() {
			return this.date_add;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_category = readInteger(dis);

					this.id_product = readInteger(dis);

					this.id_order_detail = readInteger(dis);

					this.id_order = readInteger(dis);

					this.product_quantity = readInteger(dis);

					this.product_name = readString(dis);

					this.product_quantity_in_stock = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_price = null;
					} else {
						this.product_price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.unit_price_tax_incl = null;
					} else {
						this.unit_price_tax_incl = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.reduction_percent = null;
					} else {
						this.reduction_percent = dis.readFloat();
					}

					this.date_add = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_category, dos);

				// Integer

				writeInteger(this.id_product, dos);

				// Integer

				writeInteger(this.id_order_detail, dos);

				// Integer

				writeInteger(this.id_order, dos);

				// Integer

				writeInteger(this.product_quantity, dos);

				// String

				writeString(this.product_name, dos);

				// Integer

				writeInteger(this.product_quantity_in_stock, dos);

				// Float

				if (this.product_price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.product_price);
				}

				// Float

				if (this.unit_price_tax_incl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.unit_price_tax_incl);
				}

				// Float

				if (this.reduction_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.reduction_percent);
				}

				// java.util.Date

				writeDate(this.date_add, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_category=" + String.valueOf(id_category));
			sb.append(",id_product=" + String.valueOf(id_product));
			sb.append(",id_order_detail=" + String.valueOf(id_order_detail));
			sb.append(",id_order=" + String.valueOf(id_order));
			sb.append(",product_quantity=" + String.valueOf(product_quantity));
			sb.append(",product_name=" + product_name);
			sb.append(",product_quantity_in_stock=" + String.valueOf(product_quantity_in_stock));
			sb.append(",product_price=" + String.valueOf(product_price));
			sb.append(",unit_price_tax_incl=" + String.valueOf(unit_price_tax_incl));
			sb.append(",reduction_percent=" + String.valueOf(reduction_percent));
			sb.append(",date_add=" + String.valueOf(date_add));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				CommandeStruct Commande = new CommandeStruct();
				CommandeStruct row9 = Commande;

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_2 = 0;

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "commande";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "commande" + "` WHERE `id_detail_commande` = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO `" + "commande"
						+ "` (`id_detail_commande`,`quantite_produit`,`prix_unitaire_taxes_incluses`,`pourcentage_reduction`,`date_commande`) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE `" + "commande"
						+ "` SET `quantite_produit` = ?,`prix_unitaire_taxes_incluses` = ?,`pourcentage_reduction` = ?,`date_commande` = ? WHERE `id_detail_commande` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("Commande" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				class Util_tLogRow_7 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_7 util_tLogRow_7 = new Util_tLogRow_7();
				util_tLogRow_7.setTableName("tLogRow_7");
				util_tLogRow_7.addRow(new String[] { "id_detail_commande", "quantite_produit",
						"prix_unitaire_taxes_incluses", "pourcentage_reduction", "date_commande", });
				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CommandeStruct Commande_tmp = new CommandeStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"C:/Users/ak-59/OneDrive/Bureau/Presta/Order.csv"/** End field tFileInputDelimited_2:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();
								if (!(rowtFileInputDelimited_2.length == 1
										&& ("\015").equals(rowtFileInputDelimited_2[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_2)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row2.id_category = null;

								row2.id_product = null;

								row2.id_order_detail = null;

								row2.id_order = null;

								row2.product_quantity = null;

								row2.product_name = null;

								row2.product_quantity_in_stock = null;

								row2.product_price = null;

								row2.unit_price_tax_incl = null;

								row2.reduction_percent = null;

								row2.date_add = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.id_category = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_category", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.id_category = null;

									}

								} else {

									row2.id_category = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.id_product = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_product", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.id_product = null;

									}

								} else {

									row2.id_product = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.id_order_detail = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_order_detail", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.id_order_detail = null;

									}

								} else {

									row2.id_order_detail = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.id_order = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_order", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.id_order = null;

									}

								} else {

									row2.id_order = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.product_quantity = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"product_quantity", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.product_quantity = null;

									}

								} else {

									row2.product_quantity = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.product_name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.product_name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.product_quantity_in_stock = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"product_quantity_in_stock", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.product_quantity_in_stock = null;

									}

								} else {

									row2.product_quantity_in_stock = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.product_price = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"product_price", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.product_price = null;

									}

								} else {

									row2.product_price = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.unit_price_tax_incl = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"unit_price_tax_incl", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.unit_price_tax_incl = null;

									}

								} else {

									row2.unit_price_tax_incl = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.reduction_percent = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"reduction_percent", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.reduction_percent = null;

									}

								} else {

									row2.reduction_percent = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.date_add = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"date_add", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.date_add = null;

									}

								} else {

									row2.date_add = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								Commande = null;

// # Output table : 'Commande'
								Commande_tmp.id_detail_commande = row2.id_order_detail;
								Commande_tmp.quantite_produit = row2.product_quantity;
								Commande_tmp.prix_unitaire_taxes_incluses = row2.unit_price_tax_incl;
								Commande_tmp.pourcentage_reduction = row2.reduction_percent;
								Commande_tmp.date_commande = row2.date_add;
								Commande = Commande_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "Commande"
							if (Commande != null) {

								/**
								 * [tLogRow_7 main ] start
								 */

								currentComponent = "tLogRow_7";

								// Commande
								// Commande

								if (execStat) {
									runStat.updateStatOnConnection("Commande" + iterateId, 1, 1);
								}

///////////////////////		

								String[] row_tLogRow_7 = new String[5];

								if (Commande.id_detail_commande != null) { //
									row_tLogRow_7[0] = String.valueOf(Commande.id_detail_commande);

								} //

								if (Commande.quantite_produit != null) { //
									row_tLogRow_7[1] = String.valueOf(Commande.quantite_produit);

								} //

								if (Commande.prix_unitaire_taxes_incluses != null) { //
									row_tLogRow_7[2] = FormatterUtils
											.formatUnwithE(Commande.prix_unitaire_taxes_incluses);

								} //

								if (Commande.pourcentage_reduction != null) { //
									row_tLogRow_7[3] = FormatterUtils.formatUnwithE(Commande.pourcentage_reduction);

								} //

								if (Commande.date_commande != null) { //
									row_tLogRow_7[4] = FormatterUtils.format_Date(Commande.date_commande, "dd-MM-yyyy");

								} //

								util_tLogRow_7.addRow(row_tLogRow_7);
								nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

								row9 = Commande;

								tos_count_tLogRow_7++;

								/**
								 * [tLogRow_7 main ] stop
								 */

								/**
								 * [tLogRow_7 process_data_begin ] start
								 */

								currentComponent = "tLogRow_7";

								/**
								 * [tLogRow_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								// row9
								// row9

								if (execStat) {
									runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_2 = false;
								if (row9.id_detail_commande == null) {
									pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_2.setInt(1, row9.id_detail_commande);
								}

								int checkCount_tDBOutput_2 = -1;
								try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
									while (rs_tDBOutput_2.next()) {
										checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
									}
								}
								if (checkCount_tDBOutput_2 > 0) {
									if (row9.quantite_produit == null) {
										pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(1, row9.quantite_produit);
									}

									if (row9.prix_unitaire_taxes_incluses == null) {
										pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tDBOutput_2.setFloat(2, row9.prix_unitaire_taxes_incluses);
									}

									if (row9.pourcentage_reduction == null) {
										pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tDBOutput_2.setFloat(3, row9.pourcentage_reduction);
									}

									if (row9.date_commande != null) {
										date_tDBOutput_2 = row9.date_commande.getTime();
										if (date_tDBOutput_2 < year1_tDBOutput_2
												|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
											pstmtUpdate_tDBOutput_2.setString(4, "0000-00-00 00:00:00");
										} else {
											pstmtUpdate_tDBOutput_2.setTimestamp(4,
													new java.sql.Timestamp(date_tDBOutput_2));
										}
									} else {
										pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.DATE);
									}

									if (row9.id_detail_commande == null) {
										pstmtUpdate_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(5 + count_tDBOutput_2, row9.id_detail_commande);
									}

									try {
										updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2
												+ pstmtUpdate_tDBOutput_2.executeUpdate();
										nb_line_tDBOutput_2++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;
										System.err.print(e.getMessage());
									}
								} else {
									if (row9.id_detail_commande == null) {
										pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(1, row9.id_detail_commande);
									}

									if (row9.quantite_produit == null) {
										pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_2.setInt(2, row9.quantite_produit);
									}

									if (row9.prix_unitaire_taxes_incluses == null) {
										pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tDBOutput_2.setFloat(3, row9.prix_unitaire_taxes_incluses);
									}

									if (row9.pourcentage_reduction == null) {
										pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tDBOutput_2.setFloat(4, row9.pourcentage_reduction);
									}

									if (row9.date_commande != null) {
										date_tDBOutput_2 = row9.date_commande.getTime();
										if (date_tDBOutput_2 < year1_tDBOutput_2
												|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
											pstmtInsert_tDBOutput_2.setString(5, "0000-00-00 00:00:00");
										} else {
											pstmtInsert_tDBOutput_2.setTimestamp(5,
													new java.sql.Timestamp(date_tDBOutput_2));
										}
									} else {
										pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.DATE);
									}

									try {
										insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2
												+ pstmtInsert_tDBOutput_2.executeUpdate();
										nb_line_tDBOutput_2++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tDBOutput_2++;

								if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

									conn_tDBOutput_2.commit();
									commitCounter_tDBOutput_2 = 0;

								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

								/**
								 * [tLogRow_7 process_data_end ] start
								 */

								currentComponent = "tLogRow_7";

								/**
								 * [tLogRow_7 process_data_end ] stop
								 */

							} // End of branch "Commande"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////

				java.io.PrintStream consoleOut_tLogRow_7 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
				}

				consoleOut_tLogRow_7.println(util_tLogRow_7.format().toString());
				consoleOut_tLogRow_7.flush();
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Commande" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
						if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_2")) != null) {
							pstmtUpdateToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
						if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_2")) != null) {
							pstmtInsertToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom_produit;

		public String getNom_produit() {
			return this.nom_produit;
		}

		public Float prix;

		public Float getPrix() {
			return this.prix;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer en_vente;

		public Integer getEn_vente() {
			return this.en_vente;
		}

		public Integer pas_en_stock;

		public Integer getPas_en_stock() {
			return this.pas_en_stock;
		}

		public Integer quantite;

		public Integer getQuantite() {
			return this.quantite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.nom_produit = this.nom_produit;
			other.prix = this.prix;
			other.id_produit = this.id_produit;
			other.en_vente = this.en_vente;
			other.pas_en_stock = this.pas_en_stock;
			other.quantite = this.quantite;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.id_produit = this.id_produit;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.nom_produit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix = null;
					} else {
						this.prix = dis.readFloat();
					}

					this.id_produit = readInteger(dis);

					this.en_vente = readInteger(dis);

					this.pas_en_stock = readInteger(dis);

					this.quantite = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_produit, dos);

				// Float

				if (this.prix == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix);
				}

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.en_vente, dos);

				// Integer

				writeInteger(this.pas_en_stock, dos);

				// Integer

				writeInteger(this.quantite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom_produit=" + nom_produit);
			sb.append(",prix=" + String.valueOf(prix));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",en_vente=" + String.valueOf(en_vente));
			sb.append(",pas_en_stock=" + String.valueOf(pas_en_stock));
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ProduitStruct implements routines.system.IPersistableRow<ProduitStruct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom_produit;

		public String getNom_produit() {
			return this.nom_produit;
		}

		public Float prix;

		public Float getPrix() {
			return this.prix;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer en_vente;

		public Integer getEn_vente() {
			return this.en_vente;
		}

		public Integer pas_en_stock;

		public Integer getPas_en_stock() {
			return this.pas_en_stock;
		}

		public Integer quantite;

		public Integer getQuantite() {
			return this.quantite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ProduitStruct other = (ProduitStruct) obj;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			return true;
		}

		public void copyDataTo(ProduitStruct other) {

			other.nom_produit = this.nom_produit;
			other.prix = this.prix;
			other.id_produit = this.id_produit;
			other.en_vente = this.en_vente;
			other.pas_en_stock = this.pas_en_stock;
			other.quantite = this.quantite;

		}

		public void copyKeysDataTo(ProduitStruct other) {

			other.id_produit = this.id_produit;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.nom_produit = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.prix = null;
					} else {
						this.prix = dis.readFloat();
					}

					this.id_produit = readInteger(dis);

					this.en_vente = readInteger(dis);

					this.pas_en_stock = readInteger(dis);

					this.quantite = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_produit, dos);

				// Float

				if (this.prix == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.prix);
				}

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.en_vente, dos);

				// Integer

				writeInteger(this.pas_en_stock, dos);

				// Integer

				writeInteger(this.quantite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom_produit=" + nom_produit);
			sb.append(",prix=" + String.valueOf(prix));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",en_vente=" + String.valueOf(en_vente));
			sb.append(",pas_en_stock=" + String.valueOf(pas_en_stock));
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ProduitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public Integer id_product;

		public Integer getId_product() {
			return this.id_product;
		}

		public Integer on_sale;

		public Integer getOn_sale() {
			return this.on_sale;
		}

		public Integer out_of_stock;

		public Integer getOut_of_stock() {
			return this.out_of_stock;
		}

		public Integer quantity;

		public Integer getQuantity() {
			return this.quantity;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String available_now;

		public String getAvailable_now() {
			return this.available_now;
		}

		public String available_later;

		public String getAvailable_later() {
			return this.available_later;
		}

		public String delivery_in_stock;

		public String getDelivery_in_stock() {
			return this.delivery_in_stock;
		}

		public String delivery_out_stock;

		public String getDelivery_out_stock() {
			return this.delivery_out_stock;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					this.id_product = readInteger(dis);

					this.on_sale = readInteger(dis);

					this.out_of_stock = readInteger(dis);

					this.quantity = readInteger(dis);

					this.name = readString(dis);

					this.available_now = readString(dis);

					this.available_later = readString(dis);

					this.delivery_in_stock = readString(dis);

					this.delivery_out_stock = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// Integer

				writeInteger(this.id_product, dos);

				// Integer

				writeInteger(this.on_sale, dos);

				// Integer

				writeInteger(this.out_of_stock, dos);

				// Integer

				writeInteger(this.quantity, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.available_now, dos);

				// String

				writeString(this.available_later, dos);

				// String

				writeString(this.delivery_in_stock, dos);

				// String

				writeString(this.delivery_out_stock, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("price=" + String.valueOf(price));
			sb.append(",id_product=" + String.valueOf(id_product));
			sb.append(",on_sale=" + String.valueOf(on_sale));
			sb.append(",out_of_stock=" + String.valueOf(out_of_stock));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",name=" + name);
			sb.append(",available_now=" + available_now);
			sb.append(",available_later=" + available_later);
			sb.append(",delivery_in_stock=" + delivery_in_stock);
			sb.append(",delivery_out_stock=" + delivery_out_stock);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				ProduitStruct Produit = new ProduitStruct();
				ProduitStruct row10 = Produit;

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "produit";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null || dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_3.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables("dw_totallydata", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
						if (table_tDBOutput_3.equalsIgnoreCase("produit")) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3
								+ "`(`nom_produit` VARCHAR(40)  ,`prix` FLOAT(9,7)  ,`id_produit` INT(2)  ,`en_vente` INT(1)  ,`pas_en_stock` INT(1)  ,`quantite` INT(1)  ,primary key(`id_produit`))");
					}
				}

				String insert_tDBOutput_3 = "INSERT INTO `" + "produit"
						+ "` (`nom_produit`,`prix`,`id_produit`,`en_vente`,`pas_en_stock`,`quantite`) VALUES (?,?,?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("Produit" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[6];

					public void addRow(String[] row) {

						for (int i = 0; i < 6; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 5 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 5 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[5] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(
						new String[] { "nom_produit", "prix", "id_produit", "en_vente", "pas_en_stock", "quantite", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ProduitStruct Produit_tmp = new ProduitStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/ak-59/OneDrive/Bureau/Presta/product.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/ak-59/OneDrive/Bureau/Presta/product.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.price = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"price", "row3", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row3.price = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.id_product = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id_product", "row3", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row3.id_product = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.on_sale = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"on_sale", "row3", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row3.on_sale = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.out_of_stock = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"out_of_stock", "row3", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row3.out_of_stock = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.quantity = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"quantity", "row3", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row3.quantity = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row3.name = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row3.available_now = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row3.available_later = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row3.delivery_in_stock = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							row3.delivery_out_stock = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								Produit = null;

// # Output table : 'Produit'
								Produit_tmp.nom_produit = row3.name;
								Produit_tmp.prix = row3.price;
								Produit_tmp.id_produit = row3.id_product;
								Produit_tmp.en_vente = row3.on_sale;
								Produit_tmp.pas_en_stock = row3.out_of_stock;
								Produit_tmp.quantite = row3.quantity;
								Produit = Produit_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "Produit"
							if (Produit != null) {

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								// Produit
								// Produit

								if (execStat) {
									runStat.updateStatOnConnection("Produit" + iterateId, 1, 1);
								}

///////////////////////		

								String[] row_tLogRow_3 = new String[6];

								if (Produit.nom_produit != null) { //
									row_tLogRow_3[0] = String.valueOf(Produit.nom_produit);

								} //

								if (Produit.prix != null) { //
									row_tLogRow_3[1] = FormatterUtils.formatUnwithE(Produit.prix);

								} //

								if (Produit.id_produit != null) { //
									row_tLogRow_3[2] = String.valueOf(Produit.id_produit);

								} //

								if (Produit.en_vente != null) { //
									row_tLogRow_3[3] = String.valueOf(Produit.en_vente);

								} //

								if (Produit.pas_en_stock != null) { //
									row_tLogRow_3[4] = String.valueOf(Produit.pas_en_stock);

								} //

								if (Produit.quantite != null) { //
									row_tLogRow_3[5] = String.valueOf(Produit.quantite);

								} //

								util_tLogRow_3.addRow(row_tLogRow_3);
								nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

								row10 = Produit;

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 main ] start
								 */

								currentComponent = "tDBOutput_3";

								// row10
								// row10

								if (execStat) {
									runStat.updateStatOnConnection("row10" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_3 = false;
								if (row10.nom_produit == null) {
									pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_3.setString(1, row10.nom_produit);
								}

								if (row10.prix == null) {
									pstmt_tDBOutput_3.setNull(2, java.sql.Types.FLOAT);
								} else {
									pstmt_tDBOutput_3.setFloat(2, row10.prix);
								}

								if (row10.id_produit == null) {
									pstmt_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(3, row10.id_produit);
								}

								if (row10.en_vente == null) {
									pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(4, row10.en_vente);
								}

								if (row10.pas_en_stock == null) {
									pstmt_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(5, row10.pas_en_stock);
								}

								if (row10.quantite == null) {
									pstmt_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_3.setInt(6, row10.quantite);
								}

								pstmt_tDBOutput_3.addBatch();
								nb_line_tDBOutput_3++;

								batchSizeCounter_tDBOutput_3++;
								if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
									try {
										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED
													? 0
													: 1);
										}
										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}
										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tDBOutput_3 = 0;
								}
								commitCounter_tDBOutput_3++;

								if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

									try {
										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
										}
										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
											countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}
										insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
										System.err.println(e.getMessage());

									}
									conn_tDBOutput_3.commit();
									commitCounter_tDBOutput_3 = 0;

								}

								tos_count_tDBOutput_3++;

								/**
								 * [tDBOutput_3 main ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tDBOutput_3";

								/**
								 * [tDBOutput_3 process_data_end ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

							} // End of branch "Produit"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/ak-59/OneDrive/Bureau/Presta/product.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Produit" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom_categorie;

		public String getNom_categorie() {
			return this.nom_categorie;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public Integer id_group;

		public Integer getId_group() {
			return this.id_group;
		}

		public Integer level_depth;

		public Integer getLevel_depth() {
			return this.level_depth;
		}

		public Integer id_parent;

		public Integer getId_parent() {
			return this.id_parent;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.nom_categorie = this.nom_categorie;
			other.id_categorie = this.id_categorie;
			other.id_group = this.id_group;
			other.level_depth = this.level_depth;
			other.id_parent = this.id_parent;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id_categorie = this.id_categorie;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.nom_categorie = readString(dis);

					this.id_categorie = readInteger(dis);

					this.id_group = readInteger(dis);

					this.level_depth = readInteger(dis);

					this.id_parent = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_categorie, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// Integer

				writeInteger(this.id_group, dos);

				// Integer

				writeInteger(this.level_depth, dos);

				// Integer

				writeInteger(this.id_parent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom_categorie=" + nom_categorie);
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_group=" + String.valueOf(id_group));
			sb.append(",level_depth=" + String.valueOf(level_depth));
			sb.append(",id_parent=" + String.valueOf(id_parent));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CategoryStruct implements routines.system.IPersistableRow<CategoryStruct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom_categorie;

		public String getNom_categorie() {
			return this.nom_categorie;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public Integer id_group;

		public Integer getId_group() {
			return this.id_group;
		}

		public Integer level_depth;

		public Integer getLevel_depth() {
			return this.level_depth;
		}

		public Integer id_parent;

		public Integer getId_parent() {
			return this.id_parent;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final CategoryStruct other = (CategoryStruct) obj;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			return true;
		}

		public void copyDataTo(CategoryStruct other) {

			other.nom_categorie = this.nom_categorie;
			other.id_categorie = this.id_categorie;
			other.id_group = this.id_group;
			other.level_depth = this.level_depth;
			other.id_parent = this.id_parent;

		}

		public void copyKeysDataTo(CategoryStruct other) {

			other.id_categorie = this.id_categorie;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.nom_categorie = readString(dis);

					this.id_categorie = readInteger(dis);

					this.id_group = readInteger(dis);

					this.level_depth = readInteger(dis);

					this.id_parent = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom_categorie, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// Integer

				writeInteger(this.id_group, dos);

				// Integer

				writeInteger(this.level_depth, dos);

				// Integer

				writeInteger(this.id_parent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom_categorie=" + nom_categorie);
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_group=" + String.valueOf(id_group));
			sb.append(",level_depth=" + String.valueOf(level_depth));
			sb.append(",id_parent=" + String.valueOf(id_parent));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CategoryStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];

		public Integer position;

		public Integer getPosition() {
			return this.position;
		}

		public Integer id_category;

		public Integer getId_category() {
			return this.id_category;
		}

		public Integer id_parent;

		public Integer getId_parent() {
			return this.id_parent;
		}

		public Integer id_lang;

		public Integer getId_lang() {
			return this.id_lang;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer level_depth;

		public Integer getLevel_depth() {
			return this.level_depth;
		}

		public Integer id_group;

		public Integer getId_group() {
			return this.id_group;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRESTASHOP_ODS_Prestashop.length) {
					if (length < 1024 && commonByteArray_PRESTASHOP_ODS_Prestashop.length == 0) {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[1024];
					} else {
						commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length);
				strReturn = new String(commonByteArray_PRESTASHOP_ODS_Prestashop, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.position = readInteger(dis);

					this.id_category = readInteger(dis);

					this.id_parent = readInteger(dis);

					this.id_lang = readInteger(dis);

					this.name = readString(dis);

					this.level_depth = readInteger(dis);

					this.id_group = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.position, dos);

				// Integer

				writeInteger(this.id_category, dos);

				// Integer

				writeInteger(this.id_parent, dos);

				// Integer

				writeInteger(this.id_lang, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.level_depth, dos);

				// Integer

				writeInteger(this.id_group, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("position=" + String.valueOf(position));
			sb.append(",id_category=" + String.valueOf(id_category));
			sb.append(",id_parent=" + String.valueOf(id_parent));
			sb.append(",id_lang=" + String.valueOf(id_lang));
			sb.append(",name=" + name);
			sb.append(",level_depth=" + String.valueOf(level_depth));
			sb.append(",id_group=" + String.valueOf(id_group));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				CategoryStruct Category = new CategoryStruct();
				CategoryStruct row11 = Category;

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_4 = 0;

				int updateKeyCount_tDBOutput_4 = 1;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "groupe_categorie";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbProperties_tDBOutput_4 = "noDatetimeStringSync=true";
				String url_tDBOutput_4 = null;
				if (dbProperties_tDBOutput_4 == null || dbProperties_tDBOutput_4.trim().length() == 0) {
					url_tDBOutput_4 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_4.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_4 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ properties_tDBOutput_4;
				}
				String driverClass_tDBOutput_4 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement("SELECT COUNT(1) FROM `" + "groupe_categorie" + "` WHERE `id_categorie` = ?");
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO `" + "groupe_categorie"
						+ "` (`nom_categorie`,`id_categorie`,`id_group`,`level_depth`,`id_parent`) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
				String update_tDBOutput_4 = "UPDATE `" + "groupe_categorie"
						+ "` SET `nom_categorie` = ?,`id_group` = ?,`level_depth` = ?,`id_parent` = ? WHERE `id_categorie` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("Category" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				class Util_tLogRow_4 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
				util_tLogRow_4.setTableName("tLogRow_4");
				util_tLogRow_4.addRow(
						new String[] { "nom_categorie", "id_categorie", "id_group", "level_depth", "id_parent", });
				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CategoryStruct Category_tmp = new CategoryStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Users/ak-59/OneDrive/Bureau/Presta/category.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/ak-59/OneDrive/Bureau/Presta/category.csv", "ISO-8859-15", ";", "\n", true, 1,
								0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.position = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"position", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.position = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 1;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.id_category = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id_category", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.id_category = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 2;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.id_parent = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id_parent", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.id_parent = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 3;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.id_lang = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id_lang", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.id_lang = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row4.name = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.level_depth = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"level_depth", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.level_depth = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row4.id_group = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id_group", "row4", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row4.id_group = null;

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								Category = null;

// # Output table : 'Category'
								Category_tmp.nom_categorie = row4.name;
								Category_tmp.id_categorie = row4.id_category;
								Category_tmp.id_group = row4.id_group;
								Category_tmp.level_depth = row4.level_depth;
								Category_tmp.id_parent = row4.id_parent;
								Category = Category_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "Category"
							if (Category != null) {

								/**
								 * [tLogRow_4 main ] start
								 */

								currentComponent = "tLogRow_4";

								// Category
								// Category

								if (execStat) {
									runStat.updateStatOnConnection("Category" + iterateId, 1, 1);
								}

///////////////////////		

								String[] row_tLogRow_4 = new String[5];

								if (Category.nom_categorie != null) { //
									row_tLogRow_4[0] = String.valueOf(Category.nom_categorie);

								} //

								if (Category.id_categorie != null) { //
									row_tLogRow_4[1] = String.valueOf(Category.id_categorie);

								} //

								if (Category.id_group != null) { //
									row_tLogRow_4[2] = String.valueOf(Category.id_group);

								} //

								if (Category.level_depth != null) { //
									row_tLogRow_4[3] = String.valueOf(Category.level_depth);

								} //

								if (Category.id_parent != null) { //
									row_tLogRow_4[4] = String.valueOf(Category.id_parent);

								} //

								util_tLogRow_4.addRow(row_tLogRow_4);
								nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

								row11 = Category;

								tos_count_tLogRow_4++;

								/**
								 * [tLogRow_4 main ] stop
								 */

								/**
								 * [tLogRow_4 process_data_begin ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								// row11
								// row11

								if (execStat) {
									runStat.updateStatOnConnection("row11" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_4 = false;
								if (row11.id_categorie == null) {
									pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_4.setInt(1, row11.id_categorie);
								}

								int checkCount_tDBOutput_4 = -1;
								try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
									while (rs_tDBOutput_4.next()) {
										checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
									}
								}
								if (checkCount_tDBOutput_4 > 0) {
									if (row11.nom_categorie == null) {
										pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_4.setString(1, row11.nom_categorie);
									}

									if (row11.id_group == null) {
										pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(2, row11.id_group);
									}

									if (row11.level_depth == null) {
										pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(3, row11.level_depth);
									}

									if (row11.id_parent == null) {
										pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(4, row11.id_parent);
									}

									if (row11.id_categorie == null) {
										pstmtUpdate_tDBOutput_4.setNull(5 + count_tDBOutput_4, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_4.setInt(5 + count_tDBOutput_4, row11.id_categorie);
									}

									try {
										updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4
												+ pstmtUpdate_tDBOutput_4.executeUpdate();
										nb_line_tDBOutput_4++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_4 = true;
										nb_line_tDBOutput_4++;
										System.err.print(e.getMessage());
									}
								} else {
									if (row11.nom_categorie == null) {
										pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(1, row11.nom_categorie);
									}

									if (row11.id_categorie == null) {
										pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(2, row11.id_categorie);
									}

									if (row11.id_group == null) {
										pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(3, row11.id_group);
									}

									if (row11.level_depth == null) {
										pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(4, row11.level_depth);
									}

									if (row11.id_parent == null) {
										pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(5, row11.id_parent);
									}

									try {
										insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4
												+ pstmtInsert_tDBOutput_4.executeUpdate();
										nb_line_tDBOutput_4++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_4 = true;
										nb_line_tDBOutput_4++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tDBOutput_4++;

								if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

									conn_tDBOutput_4.commit();
									commitCounter_tDBOutput_4 = 0;

								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

								/**
								 * [tLogRow_4 process_data_end ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_end ] stop
								 */

							} // End of branch "Category"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Users/ak-59/OneDrive/Bureau/Presta/category.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////

				java.io.PrintStream consoleOut_tLogRow_4 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}

				consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
				consoleOut_tLogRow_4.flush();
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Category" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
						if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_4")) != null) {
							pstmtUpdateToClose_tDBOutput_4.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
						if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_4")) != null) {
							pstmtInsertToClose_tDBOutput_4.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_detail_commande;

		public int getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public java.util.Date id_temps;

		public java.util.Date getId_temps() {
			return this.id_temps;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_detail_commande;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				result = prime * result + ((this.id_temps == null) ? 0 : this.id_temps.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id_detail_commande != other.id_detail_commande)
				return false;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			if (this.id_temps == null) {
				if (other.id_temps != null)
					return false;

			} else if (!this.id_temps.equals(other.id_temps))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = dis.readInt();

					this.id_client = readInteger(dis);

					this.id_produit = readInteger(dis);

					this.id_categorie = readInteger(dis);

					this.id_temps = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_detail_commande);

				// Integer

				writeInteger(this.id_client, dos);

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// java.util.Date

				writeDate(this.id_temps, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_temps=" + String.valueOf(id_temps));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_temps, other.id_temps);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_detail_commande;

		public int getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public java.util.Date id_temps;

		public java.util.Date getId_temps() {
			return this.id_temps;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_detail_commande;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				result = prime * result + ((this.id_temps == null) ? 0 : this.id_temps.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.id_detail_commande != other.id_detail_commande)
				return false;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			if (this.id_temps == null) {
				if (other.id_temps != null)
					return false;

			} else if (!this.id_temps.equals(other.id_temps))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = dis.readInt();

					this.id_client = readInteger(dis);

					this.id_produit = readInteger(dis);

					this.id_categorie = readInteger(dis);

					this.id_temps = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_detail_commande);

				// Integer

				writeInteger(this.id_client, dos);

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// java.util.Date

				writeDate(this.id_temps, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_temps=" + String.valueOf(id_temps));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_temps, other.id_temps);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_detail_commande;

		public int getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public java.util.Date id_temps;

		public java.util.Date getId_temps() {
			return this.id_temps;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_detail_commande;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				result = prime * result + ((this.id_temps == null) ? 0 : this.id_temps.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id_detail_commande != other.id_detail_commande)
				return false;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			if (this.id_temps == null) {
				if (other.id_temps != null)
					return false;

			} else if (!this.id_temps.equals(other.id_temps))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = dis.readInt();

					this.id_client = readInteger(dis);

					this.id_produit = readInteger(dis);

					this.id_categorie = readInteger(dis);

					this.id_temps = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_detail_commande);

				// Integer

				writeInteger(this.id_client, dos);

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// java.util.Date

				writeDate(this.id_temps, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_temps=" + String.valueOf(id_temps));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_temps, other.id_temps);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FaitStruct implements routines.system.IPersistableRow<FaitStruct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_detail_commande;

		public int getId_detail_commande() {
			return this.id_detail_commande;
		}

		public Integer id_client;

		public Integer getId_client() {
			return this.id_client;
		}

		public Integer id_produit;

		public Integer getId_produit() {
			return this.id_produit;
		}

		public Integer id_categorie;

		public Integer getId_categorie() {
			return this.id_categorie;
		}

		public java.util.Date id_temps;

		public java.util.Date getId_temps() {
			return this.id_temps;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_detail_commande;

				result = prime * result + ((this.id_client == null) ? 0 : this.id_client.hashCode());

				result = prime * result + ((this.id_produit == null) ? 0 : this.id_produit.hashCode());

				result = prime * result + ((this.id_categorie == null) ? 0 : this.id_categorie.hashCode());

				result = prime * result + ((this.id_temps == null) ? 0 : this.id_temps.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final FaitStruct other = (FaitStruct) obj;

			if (this.id_detail_commande != other.id_detail_commande)
				return false;

			if (this.id_client == null) {
				if (other.id_client != null)
					return false;

			} else if (!this.id_client.equals(other.id_client))

				return false;

			if (this.id_produit == null) {
				if (other.id_produit != null)
					return false;

			} else if (!this.id_produit.equals(other.id_produit))

				return false;

			if (this.id_categorie == null) {
				if (other.id_categorie != null)
					return false;

			} else if (!this.id_categorie.equals(other.id_categorie))

				return false;

			if (this.id_temps == null) {
				if (other.id_temps != null)
					return false;

			} else if (!this.id_temps.equals(other.id_temps))

				return false;

			return true;
		}

		public void copyDataTo(FaitStruct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		public void copyKeysDataTo(FaitStruct other) {

			other.id_detail_commande = this.id_detail_commande;
			other.id_client = this.id_client;
			other.id_produit = this.id_produit;
			other.id_categorie = this.id_categorie;
			other.id_temps = this.id_temps;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_detail_commande = dis.readInt();

					this.id_client = readInteger(dis);

					this.id_produit = readInteger(dis);

					this.id_categorie = readInteger(dis);

					this.id_temps = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_detail_commande);

				// Integer

				writeInteger(this.id_client, dos);

				// Integer

				writeInteger(this.id_produit, dos);

				// Integer

				writeInteger(this.id_categorie, dos);

				// java.util.Date

				writeDate(this.id_temps, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_detail_commande=" + String.valueOf(id_detail_commande));
			sb.append(",id_client=" + String.valueOf(id_client));
			sb.append(",id_produit=" + String.valueOf(id_produit));
			sb.append(",id_categorie=" + String.valueOf(id_categorie));
			sb.append(",id_temps=" + String.valueOf(id_temps));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FaitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_detail_commande, other.id_detail_commande);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_produit, other.id_produit);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_categorie, other.id_categorie);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_temps, other.id_temps);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PRESTASHOP_ODS_Prestashop = new byte[0];
		static byte[] commonByteArray_PRESTASHOP_ODS_Prestashop = new byte[0];

		public Integer id_order_detail;

		public Integer getId_order_detail() {
			return this.id_order_detail;
		}

		public Integer id_customer;

		public Integer getId_customer() {
			return this.id_customer;
		}

		public Integer id_product;

		public Integer getId_product() {
			return this.id_product;
		}

		public Integer id_category;

		public Integer getId_category() {
			return this.id_category;
		}

		public java.util.Date date_add;

		public java.util.Date getDate_add() {
			return this.date_add;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRESTASHOP_ODS_Prestashop) {

				try {

					int length = 0;

					this.id_order_detail = readInteger(dis);

					this.id_customer = readInteger(dis);

					this.id_product = readInteger(dis);

					this.id_category = readInteger(dis);

					this.date_add = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id_order_detail, dos);

				// Integer

				writeInteger(this.id_customer, dos);

				// Integer

				writeInteger(this.id_product, dos);

				// Integer

				writeInteger(this.id_category, dos);

				// java.util.Date

				writeDate(this.date_add, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_order_detail=" + String.valueOf(id_order_detail));
			sb.append(",id_customer=" + String.valueOf(id_customer));
			sb.append(",id_product=" + String.valueOf(id_product));
			sb.append(",id_category=" + String.valueOf(id_category));
			sb.append(",date_add=" + String.valueOf(date_add));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				FaitStruct Fait = new FaitStruct();
				FaitStruct row6 = Fait;
				row7Struct row7 = new row7Struct();
				row7Struct row12 = row7;

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_5 = 0;

				int updateKeyCount_tDBOutput_5 = 5;
				if (updateKeyCount_tDBOutput_5 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "faits";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null || dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_5.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mariadb://" + "" + ":" + "3308" + "/" + "dw_totallydata" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;
				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				String update_tDBOutput_5 = "UPDATE `" + "faits"
						+ "` SET  WHERE `id_detail_commande` = ? AND `id_client` = ? AND `id_produit` = ? AND `id_categorie` = ? AND `id_temps` = ?";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(
						new String[] { "id_detail_commande", "id_client", "id_produit", "id_categorie", "id_temps", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("Fait" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("tLogRow_5");
				util_tLogRow_5.addRow(
						new String[] { "id_detail_commande", "id_client", "id_produit", "id_categorie", "id_temps", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				FaitStruct Fait_tmp = new FaitStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /** Start field tFileInputDelimited_5:FILENAME */
						"C:/Users/ak-59/OneDrive/Bureau/Presta/Fait.csv"/** End field tFileInputDelimited_5:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_5)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd("" + rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('\"');

						csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5.getValues();
								if (!(rowtFileInputDelimited_5.length == 1
										&& ("\015").equals(rowtFileInputDelimited_5[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
											: totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5
										? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_5)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5.setLineEnd("" + rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('\"');

							csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_5 != 0 && csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {
						rowstate_tFileInputDelimited_5.reset();

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5.getValues();

						if (rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row5 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row5 = new row5Struct();
						try {

							char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_5_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row5.id_order_detail = null;

								row5.id_customer = null;

								row5.id_product = null;

								row5.id_category = null;

								row5.date_add = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {

											row5.id_order_detail = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

										} catch (java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_order_detail", "row5",
															rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
										}
									} else {

										row5.id_order_detail = null;

									}

								} else {

									row5.id_order_detail = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {

											row5.id_customer = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

										} catch (java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_customer", "row5",
															rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
										}
									} else {

										row5.id_customer = null;

									}

								} else {

									row5.id_customer = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {

											row5.id_product = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

										} catch (java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_product", "row5",
															rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
										}
									} else {

										row5.id_product = null;

									}

								} else {

									row5.id_product = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {

											row5.id_category = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

										} catch (java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"id_category", "row5",
															rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
										}
									} else {

										row5.id_category = null;

									}

								} else {

									row5.id_category = null;

								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {

											row5.date_add = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_5) {
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"date_add", "row5",
															rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
										}
									} else {

										row5.date_add = null;

									}

								} else {

									row5.date_add = null;

								}

							}

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								Fait = null;

// # Output table : 'Fait'
								Fait_tmp.id_detail_commande = row5.id_order_detail;
								Fait_tmp.id_client = row5.id_customer;
								Fait_tmp.id_produit = row5.id_product;
								Fait_tmp.id_categorie = row5.id_category;
								Fait_tmp.id_temps = row5.date_add;
								Fait = Fait_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "Fait"
							if (Fait != null) {

								/**
								 * [tLogRow_5 main ] start
								 */

								currentComponent = "tLogRow_5";

								// Fait
								// Fait

								if (execStat) {
									runStat.updateStatOnConnection("Fait" + iterateId, 1, 1);
								}

///////////////////////		

								String[] row_tLogRow_5 = new String[5];

								row_tLogRow_5[0] = String.valueOf(Fait.id_detail_commande);

								if (Fait.id_client != null) { //
									row_tLogRow_5[1] = String.valueOf(Fait.id_client);

								} //

								if (Fait.id_produit != null) { //
									row_tLogRow_5[2] = String.valueOf(Fait.id_produit);

								} //

								if (Fait.id_categorie != null) { //
									row_tLogRow_5[3] = String.valueOf(Fait.id_categorie);

								} //

								if (Fait.id_temps != null) { //
									row_tLogRow_5[4] = FormatterUtils.format_Date(Fait.id_temps, "dd-MM-yyyy");

								} //

								util_tLogRow_5.addRow(row_tLogRow_5);
								nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

								row6 = Fait;

								tos_count_tLogRow_5++;

								/**
								 * [tLogRow_5 main ] stop
								 */

								/**
								 * [tLogRow_5 process_data_begin ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_begin ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								// row6
								// row6

								if (execStat) {
									runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
								}

								row7 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches((row6.id_detail_commande != 0),
										"id_detail_commande!=0 failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row7 == null) {
										row7 = new row7Struct();
									}
									row7.id_detail_commande = row6.id_detail_commande;
									row7.id_client = row6.id_client;
									row7.id_produit = row6.id_produit;
									row7.id_categorie = row6.id_categorie;
									row7.id_temps = row6.id_temps;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row7"
								if (row7 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									// row7
									// row7

									if (execStat) {
										runStat.updateStatOnConnection("row7" + iterateId, 1, 1);
									}

///////////////////////		

									String[] row_tLogRow_2 = new String[5];

									row_tLogRow_2[0] = String.valueOf(row7.id_detail_commande);

									if (row7.id_client != null) { //
										row_tLogRow_2[1] = String.valueOf(row7.id_client);

									} //

									if (row7.id_produit != null) { //
										row_tLogRow_2[2] = String.valueOf(row7.id_produit);

									} //

									if (row7.id_categorie != null) { //
										row_tLogRow_2[3] = String.valueOf(row7.id_categorie);

									} //

									if (row7.id_temps != null) { //
										row_tLogRow_2[4] = FormatterUtils.format_Date(row7.id_temps, "dd-MM-yyyy");

									} //

									util_tLogRow_2.addRow(row_tLogRow_2);
									nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

									row12 = row7;

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

									/**
									 * [tLogRow_2 process_data_begin ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_5 main ] start
									 */

									currentComponent = "tDBOutput_5";

									// row12
									// row12

									if (execStat) {
										runStat.updateStatOnConnection("row12" + iterateId, 1, 1);
									}

									whetherReject_tDBOutput_5 = false;

									pstmt_tDBOutput_5.setInt(1 + count_tDBOutput_5, row12.id_detail_commande);

									if (row12.id_client == null) {
										pstmt_tDBOutput_5.setNull(2 + count_tDBOutput_5, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_5.setInt(2 + count_tDBOutput_5, row12.id_client);
									}

									if (row12.id_produit == null) {
										pstmt_tDBOutput_5.setNull(3 + count_tDBOutput_5, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_5.setInt(3 + count_tDBOutput_5, row12.id_produit);
									}

									if (row12.id_categorie == null) {
										pstmt_tDBOutput_5.setNull(4 + count_tDBOutput_5, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_5.setInt(4 + count_tDBOutput_5, row12.id_categorie);
									}

									if (row12.id_temps != null) {
										pstmt_tDBOutput_5.setTimestamp(5 + count_tDBOutput_5,
												new java.sql.Timestamp(row12.id_temps.getTime()));
									} else {
										pstmt_tDBOutput_5.setNull(5 + count_tDBOutput_5, java.sql.Types.TIMESTAMP);
									}

									pstmt_tDBOutput_5.addBatch();
									nb_line_tDBOutput_5++;

									batchSizeCounter_tDBOutput_5++;
									if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
										try {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
											batchSizeCounter_tDBOutput_5 = 0;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
											System.err.println(e.getMessage());
										}

									}
									commitCounter_tDBOutput_5++;

									if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

										try {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_5 = 0;
											for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
												countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
														: countEach_tDBOutput_5);
											}
											updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_5.commit();
										commitCounter_tDBOutput_5 = 0;

									}

									tos_count_tDBOutput_5++;

									/**
									 * [tDBOutput_5 main ] stop
									 */

									/**
									 * [tDBOutput_5 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_5 process_data_end ] start
									 */

									currentComponent = "tDBOutput_5";

									/**
									 * [tDBOutput_5 process_data_end ] stop
									 */

									/**
									 * [tLogRow_2 process_data_end ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_end ] stop
									 */

								} // End of branch "row7"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_5 process_data_end ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_end ] stop
								 */

							} // End of branch "Fait"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Fait" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (pstmt_tDBOutput_5 != null) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

						updatedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					updatedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(e.getMessage());

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ODS_Prestashop ODS_PrestashopClass = new ODS_Prestashop();

		int exitCode = ODS_PrestashopClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ODS_Prestashop.class.getClassLoader()
					.getResourceAsStream("prestashop/ods_prestashop_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ODS_Prestashop.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_4.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : ODS_Prestashop");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 383136 characters generated by Talend Open Studio for Data Integration on the
 * 30 avril 2020 16:30:40 CEST
 ************************************************************************************************/
